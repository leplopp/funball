package com.game.index;

import java.awt.Canvas;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.DisplayMode;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Toolkit;
import java.awt.image.BufferStrategy;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferInt;

import javax.swing.JFrame;

import com.game.Handlers.Handler;
import com.game.controls.keyinput;
import com.game.index.OBJ.Ball;
import com.game.index.OBJ.Block;
import com.game.index.OBJ.Box;
import com.game.index.graphics.Render;
import com.game.index.graphics.Screen;
import com.game.registers.BufferdimageLoader;
import com.game.util.ID;

public class game extends Canvas implements Runnable{
	
	//private static final JFrame frame = new JFrame();
	private static final long serialVersionUID = 1L;
	public static final String TITLE = "funBall v.0.0.1.0.2A";
	
	private boolean running = false;
	private Thread therad;
	private Render render;
	private BufferedImage level;
	private static int Width, Height ;
	
	private Handler handler;
	protected ID id;
	
	private Camera camera;
	
	public game()	{
		System.out.println(Height + "," + Width);
		//screen = new Screen(frame.getSize().width, frame.getSize().height);
		//pixels = ((DataBufferInt) img.getRaster().getDataBuffer()).getData();
		
		BufferdimageLoader loader = new BufferdimageLoader();
		level = loader.lodImage("/testlevel.png");
		camera = new Camera(0, 0);
		handler = new Handler();
		this.addKeyListener(new keyinput(handler));
		
		LoadLevel(level);
		

		
	}
	
	private void start()	{
		if (running) 
			return;
		running = true;
		therad = new Thread(this);
		therad.start();
		
		System.out.println("progress");
	}
	
	private void stop()	{
		if (!running)
			return;
		running = false;
		try {
		therad.join();
		}catch (Exception e) {
			e.printStackTrace();
		}
	}
	

	public void run() {
		   while (running)	{
			   tick();
			   render();
		   }
			 
	}
	
	public void tick() {		
		System.out.println("Tick");
		try {
			therad.sleep(1);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		
		for (int i = 0; i<handler.object.size(); i++)	{
			if(handler.object.get(i).getId() == ID.player)	{
				camera.tick(handler.object.get(i));
			}
		}
		
		handler.tick();
	}

	
	private void render() {
		BufferStrategy bs = this.getBufferStrategy();
		if (bs == null){
		createBufferStrategy(3);
		return;
		
	}
	
	Graphics g = bs.getDrawGraphics();
	Graphics2D g2d = (Graphics2D) g;
	
	g.setColor(Color.red);
	g.fillRect(0, 0, Width, Height);

	g2d.translate(-camera.getX(), -camera.getY());
	
	handler.render(g);
	
	g2d.translate(camera.getX(), camera.getY());
	
	g.dispose();
	bs.show();	
}
	
	public static void main(String[] args) {
		
		Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();

	    final int screen_Width = dim.width;
	    final int screen_Height = dim.height;
		
		JFrame frame = new JFrame();
	    
		frame.pack();
		frame.setTitle(TITLE);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setLocationRelativeTo(null);
	    frame.setSize(screen_Width , screen_Height);
	    frame.setExtendedState(Frame.MAXIMIZED_BOTH);
		frame.setResizable(true);
		Height = (int) frame.getSize().getHeight();
		Width = (int) frame.getSize().getWidth();
		
		game game = new game();
		frame.add(game);
		
		frame.setVisible(true);
		
		System.out.println("starting. . . ");
		
		game.start();
		
	}
	
	private void LoadLevel(BufferedImage image)	{
		int w = image.getWidth();
		int h = image.getHeight();
		
		for (int xx = 0; xx <w; xx++)	{
			for (int yy = 0; yy<h; yy++)	{
				int pixel = image.getRGB(xx, yy);
				int red = (pixel >> 16) & 0xff;
				int green = (pixel >> 8) & 0xff;
				int blue = (pixel) & 0xff;
				
				if (red == 255)		{
					handler.addobj(new Block(xx*32, yy*32, ID.Block));	
					
				if (green == 255)	{
					handler.addobj(new Box(32, 32, ID.Block));
				}
					
				if (blue == 255)	{
					handler.addobj(new Ball(xx*32, yy*32, ID.player, handler));
					
				}
				}
			}
		}
	}
}
